/**
 */
package org.liquibase.xml.ns.dbchangelog.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.liquibase.xml.ns.dbchangelog.util.DbchangelogAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class DbchangelogItemProviderAdapterFactory extends DbchangelogAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public DbchangelogItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.liquibase.xml.ns.dbchangelog.AddAutoIncrementType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AddAutoIncrementTypeItemProvider addAutoIncrementTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.liquibase.xml.ns.dbchangelog.AddAutoIncrementType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAddAutoIncrementTypeAdapter() {
		if (addAutoIncrementTypeItemProvider == null) {
			addAutoIncrementTypeItemProvider = new AddAutoIncrementTypeItemProvider(this);
		}

		return addAutoIncrementTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.liquibase.xml.ns.dbchangelog.AddColumnType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AddColumnTypeItemProvider addColumnTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.liquibase.xml.ns.dbchangelog.AddColumnType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAddColumnTypeAdapter() {
		if (addColumnTypeItemProvider == null) {
			addColumnTypeItemProvider = new AddColumnTypeItemProvider(this);
		}

		return addColumnTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.liquibase.xml.ns.dbchangelog.AddDefaultValueType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AddDefaultValueTypeItemProvider addDefaultValueTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.liquibase.xml.ns.dbchangelog.AddDefaultValueType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAddDefaultValueTypeAdapter() {
		if (addDefaultValueTypeItemProvider == null) {
			addDefaultValueTypeItemProvider = new AddDefaultValueTypeItemProvider(this);
		}

		return addDefaultValueTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.liquibase.xml.ns.dbchangelog.AddForeignKeyConstraintType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AddForeignKeyConstraintTypeItemProvider addForeignKeyConstraintTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.liquibase.xml.ns.dbchangelog.AddForeignKeyConstraintType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAddForeignKeyConstraintTypeAdapter() {
		if (addForeignKeyConstraintTypeItemProvider == null) {
			addForeignKeyConstraintTypeItemProvider = new AddForeignKeyConstraintTypeItemProvider(this);
		}

		return addForeignKeyConstraintTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.liquibase.xml.ns.dbchangelog.AddLookupTableType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AddLookupTableTypeItemProvider addLookupTableTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.liquibase.xml.ns.dbchangelog.AddLookupTableType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAddLookupTableTypeAdapter() {
		if (addLookupTableTypeItemProvider == null) {
			addLookupTableTypeItemProvider = new AddLookupTableTypeItemProvider(this);
		}

		return addLookupTableTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.liquibase.xml.ns.dbchangelog.AddNotNullConstraintType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AddNotNullConstraintTypeItemProvider addNotNullConstraintTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.liquibase.xml.ns.dbchangelog.AddNotNullConstraintType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAddNotNullConstraintTypeAdapter() {
		if (addNotNullConstraintTypeItemProvider == null) {
			addNotNullConstraintTypeItemProvider = new AddNotNullConstraintTypeItemProvider(this);
		}

		return addNotNullConstraintTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.liquibase.xml.ns.dbchangelog.AddPrimaryKeyType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AddPrimaryKeyTypeItemProvider addPrimaryKeyTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.liquibase.xml.ns.dbchangelog.AddPrimaryKeyType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAddPrimaryKeyTypeAdapter() {
		if (addPrimaryKeyTypeItemProvider == null) {
			addPrimaryKeyTypeItemProvider = new AddPrimaryKeyTypeItemProvider(this);
		}

		return addPrimaryKeyTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.liquibase.xml.ns.dbchangelog.AddUniqueConstraintType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AddUniqueConstraintTypeItemProvider addUniqueConstraintTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.liquibase.xml.ns.dbchangelog.AddUniqueConstraintType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAddUniqueConstraintTypeAdapter() {
		if (addUniqueConstraintTypeItemProvider == null) {
			addUniqueConstraintTypeItemProvider = new AddUniqueConstraintTypeItemProvider(this);
		}

		return addUniqueConstraintTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.liquibase.xml.ns.dbchangelog.AlterSequenceType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AlterSequenceTypeItemProvider alterSequenceTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.liquibase.xml.ns.dbchangelog.AlterSequenceType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAlterSequenceTypeAdapter() {
		if (alterSequenceTypeItemProvider == null) {
			alterSequenceTypeItemProvider = new AlterSequenceTypeItemProvider(this);
		}

		return alterSequenceTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.liquibase.xml.ns.dbchangelog.AndType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AndTypeItemProvider andTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.liquibase.xml.ns.dbchangelog.AndType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAndTypeAdapter() {
		if (andTypeItemProvider == null) {
			andTypeItemProvider = new AndTypeItemProvider(this);
		}

		return andTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.liquibase.xml.ns.dbchangelog.AppendType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AppendTypeItemProvider appendTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.liquibase.xml.ns.dbchangelog.AppendType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAppendTypeAdapter() {
		if (appendTypeItemProvider == null) {
			appendTypeItemProvider = new AppendTypeItemProvider(this);
		}

		return appendTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.liquibase.xml.ns.dbchangelog.ArgType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ArgTypeItemProvider argTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.liquibase.xml.ns.dbchangelog.ArgType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createArgTypeAdapter() {
		if (argTypeItemProvider == null) {
			argTypeItemProvider = new ArgTypeItemProvider(this);
		}

		return argTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.liquibase.xml.ns.dbchangelog.ChangeLogPropertyDefinedType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChangeLogPropertyDefinedTypeItemProvider changeLogPropertyDefinedTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.liquibase.xml.ns.dbchangelog.ChangeLogPropertyDefinedType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createChangeLogPropertyDefinedTypeAdapter() {
		if (changeLogPropertyDefinedTypeItemProvider == null) {
			changeLogPropertyDefinedTypeItemProvider = new ChangeLogPropertyDefinedTypeItemProvider(this);
		}

		return changeLogPropertyDefinedTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.liquibase.xml.ns.dbchangelog.ChangeSetExecutedType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChangeSetExecutedTypeItemProvider changeSetExecutedTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.liquibase.xml.ns.dbchangelog.ChangeSetExecutedType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createChangeSetExecutedTypeAdapter() {
		if (changeSetExecutedTypeItemProvider == null) {
			changeSetExecutedTypeItemProvider = new ChangeSetExecutedTypeItemProvider(this);
		}

		return changeSetExecutedTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.liquibase.xml.ns.dbchangelog.ChangeSetType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChangeSetTypeItemProvider changeSetTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.liquibase.xml.ns.dbchangelog.ChangeSetType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createChangeSetTypeAdapter() {
		if (changeSetTypeItemProvider == null) {
			changeSetTypeItemProvider = new ChangeSetTypeItemProvider(this);
		}

		return changeSetTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.liquibase.xml.ns.dbchangelog.ColumnExistsType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ColumnExistsTypeItemProvider columnExistsTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.liquibase.xml.ns.dbchangelog.ColumnExistsType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createColumnExistsTypeAdapter() {
		if (columnExistsTypeItemProvider == null) {
			columnExistsTypeItemProvider = new ColumnExistsTypeItemProvider(this);
		}

		return columnExistsTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.liquibase.xml.ns.dbchangelog.ColumnType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ColumnTypeItemProvider columnTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.liquibase.xml.ns.dbchangelog.ColumnType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createColumnTypeAdapter() {
		if (columnTypeItemProvider == null) {
			columnTypeItemProvider = new ColumnTypeItemProvider(this);
		}

		return columnTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.liquibase.xml.ns.dbchangelog.ColumnType1} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ColumnType1ItemProvider columnType1ItemProvider;

	/**
	 * This creates an adapter for a {@link org.liquibase.xml.ns.dbchangelog.ColumnType1}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createColumnType1Adapter() {
		if (columnType1ItemProvider == null) {
			columnType1ItemProvider = new ColumnType1ItemProvider(this);
		}

		return columnType1ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.liquibase.xml.ns.dbchangelog.ColumnType2} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ColumnType2ItemProvider columnType2ItemProvider;

	/**
	 * This creates an adapter for a {@link org.liquibase.xml.ns.dbchangelog.ColumnType2}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createColumnType2Adapter() {
		if (columnType2ItemProvider == null) {
			columnType2ItemProvider = new ColumnType2ItemProvider(this);
		}

		return columnType2ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.liquibase.xml.ns.dbchangelog.ColumnType3} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ColumnType3ItemProvider columnType3ItemProvider;

	/**
	 * This creates an adapter for a {@link org.liquibase.xml.ns.dbchangelog.ColumnType3}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createColumnType3Adapter() {
		if (columnType3ItemProvider == null) {
			columnType3ItemProvider = new ColumnType3ItemProvider(this);
		}

		return columnType3ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.liquibase.xml.ns.dbchangelog.ColumnType4} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ColumnType4ItemProvider columnType4ItemProvider;

	/**
	 * This creates an adapter for a {@link org.liquibase.xml.ns.dbchangelog.ColumnType4}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createColumnType4Adapter() {
		if (columnType4ItemProvider == null) {
			columnType4ItemProvider = new ColumnType4ItemProvider(this);
		}

		return columnType4ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.liquibase.xml.ns.dbchangelog.ConstraintsType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConstraintsTypeItemProvider constraintsTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.liquibase.xml.ns.dbchangelog.ConstraintsType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConstraintsTypeAdapter() {
		if (constraintsTypeItemProvider == null) {
			constraintsTypeItemProvider = new ConstraintsTypeItemProvider(this);
		}

		return constraintsTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.liquibase.xml.ns.dbchangelog.CreateIndexType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CreateIndexTypeItemProvider createIndexTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.liquibase.xml.ns.dbchangelog.CreateIndexType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCreateIndexTypeAdapter() {
		if (createIndexTypeItemProvider == null) {
			createIndexTypeItemProvider = new CreateIndexTypeItemProvider(this);
		}

		return createIndexTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.liquibase.xml.ns.dbchangelog.CreateProcedureType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CreateProcedureTypeItemProvider createProcedureTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.liquibase.xml.ns.dbchangelog.CreateProcedureType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCreateProcedureTypeAdapter() {
		if (createProcedureTypeItemProvider == null) {
			createProcedureTypeItemProvider = new CreateProcedureTypeItemProvider(this);
		}

		return createProcedureTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.liquibase.xml.ns.dbchangelog.CreateSequenceType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CreateSequenceTypeItemProvider createSequenceTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.liquibase.xml.ns.dbchangelog.CreateSequenceType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCreateSequenceTypeAdapter() {
		if (createSequenceTypeItemProvider == null) {
			createSequenceTypeItemProvider = new CreateSequenceTypeItemProvider(this);
		}

		return createSequenceTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.liquibase.xml.ns.dbchangelog.CreateTableType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CreateTableTypeItemProvider createTableTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.liquibase.xml.ns.dbchangelog.CreateTableType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCreateTableTypeAdapter() {
		if (createTableTypeItemProvider == null) {
			createTableTypeItemProvider = new CreateTableTypeItemProvider(this);
		}

		return createTableTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.liquibase.xml.ns.dbchangelog.CreateViewType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CreateViewTypeItemProvider createViewTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.liquibase.xml.ns.dbchangelog.CreateViewType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCreateViewTypeAdapter() {
		if (createViewTypeItemProvider == null) {
			createViewTypeItemProvider = new CreateViewTypeItemProvider(this);
		}

		return createViewTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.liquibase.xml.ns.dbchangelog.CustomChangeType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CustomChangeTypeItemProvider customChangeTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.liquibase.xml.ns.dbchangelog.CustomChangeType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCustomChangeTypeAdapter() {
		if (customChangeTypeItemProvider == null) {
			customChangeTypeItemProvider = new CustomChangeTypeItemProvider(this);
		}

		return customChangeTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.liquibase.xml.ns.dbchangelog.CustomPreconditionType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CustomPreconditionTypeItemProvider customPreconditionTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.liquibase.xml.ns.dbchangelog.CustomPreconditionType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCustomPreconditionTypeAdapter() {
		if (customPreconditionTypeItemProvider == null) {
			customPreconditionTypeItemProvider = new CustomPreconditionTypeItemProvider(this);
		}

		return customPreconditionTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.liquibase.xml.ns.dbchangelog.DatabaseChangeLogType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DatabaseChangeLogTypeItemProvider databaseChangeLogTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.liquibase.xml.ns.dbchangelog.DatabaseChangeLogType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDatabaseChangeLogTypeAdapter() {
		if (databaseChangeLogTypeItemProvider == null) {
			databaseChangeLogTypeItemProvider = new DatabaseChangeLogTypeItemProvider(this);
		}

		return databaseChangeLogTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.liquibase.xml.ns.dbchangelog.DbmsType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DbmsTypeItemProvider dbmsTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.liquibase.xml.ns.dbchangelog.DbmsType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDbmsTypeAdapter() {
		if (dbmsTypeItemProvider == null) {
			dbmsTypeItemProvider = new DbmsTypeItemProvider(this);
		}

		return dbmsTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.liquibase.xml.ns.dbchangelog.DeleteType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DeleteTypeItemProvider deleteTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.liquibase.xml.ns.dbchangelog.DeleteType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDeleteTypeAdapter() {
		if (deleteTypeItemProvider == null) {
			deleteTypeItemProvider = new DeleteTypeItemProvider(this);
		}

		return deleteTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.liquibase.xml.ns.dbchangelog.DocumentRoot} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DocumentRootItemProvider documentRootItemProvider;

	/**
	 * This creates an adapter for a {@link org.liquibase.xml.ns.dbchangelog.DocumentRoot}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDocumentRootAdapter() {
		if (documentRootItemProvider == null) {
			documentRootItemProvider = new DocumentRootItemProvider(this);
		}

		return documentRootItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.liquibase.xml.ns.dbchangelog.DropAllForeignKeyConstraintsType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DropAllForeignKeyConstraintsTypeItemProvider dropAllForeignKeyConstraintsTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.liquibase.xml.ns.dbchangelog.DropAllForeignKeyConstraintsType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDropAllForeignKeyConstraintsTypeAdapter() {
		if (dropAllForeignKeyConstraintsTypeItemProvider == null) {
			dropAllForeignKeyConstraintsTypeItemProvider = new DropAllForeignKeyConstraintsTypeItemProvider(this);
		}

		return dropAllForeignKeyConstraintsTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.liquibase.xml.ns.dbchangelog.DropColumnType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DropColumnTypeItemProvider dropColumnTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.liquibase.xml.ns.dbchangelog.DropColumnType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDropColumnTypeAdapter() {
		if (dropColumnTypeItemProvider == null) {
			dropColumnTypeItemProvider = new DropColumnTypeItemProvider(this);
		}

		return dropColumnTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.liquibase.xml.ns.dbchangelog.DropDefaultValueType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DropDefaultValueTypeItemProvider dropDefaultValueTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.liquibase.xml.ns.dbchangelog.DropDefaultValueType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDropDefaultValueTypeAdapter() {
		if (dropDefaultValueTypeItemProvider == null) {
			dropDefaultValueTypeItemProvider = new DropDefaultValueTypeItemProvider(this);
		}

		return dropDefaultValueTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.liquibase.xml.ns.dbchangelog.DropForeignKeyConstraintType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DropForeignKeyConstraintTypeItemProvider dropForeignKeyConstraintTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.liquibase.xml.ns.dbchangelog.DropForeignKeyConstraintType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDropForeignKeyConstraintTypeAdapter() {
		if (dropForeignKeyConstraintTypeItemProvider == null) {
			dropForeignKeyConstraintTypeItemProvider = new DropForeignKeyConstraintTypeItemProvider(this);
		}

		return dropForeignKeyConstraintTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.liquibase.xml.ns.dbchangelog.DropIndexType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DropIndexTypeItemProvider dropIndexTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.liquibase.xml.ns.dbchangelog.DropIndexType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDropIndexTypeAdapter() {
		if (dropIndexTypeItemProvider == null) {
			dropIndexTypeItemProvider = new DropIndexTypeItemProvider(this);
		}

		return dropIndexTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.liquibase.xml.ns.dbchangelog.DropNotNullConstraintType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DropNotNullConstraintTypeItemProvider dropNotNullConstraintTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.liquibase.xml.ns.dbchangelog.DropNotNullConstraintType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDropNotNullConstraintTypeAdapter() {
		if (dropNotNullConstraintTypeItemProvider == null) {
			dropNotNullConstraintTypeItemProvider = new DropNotNullConstraintTypeItemProvider(this);
		}

		return dropNotNullConstraintTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.liquibase.xml.ns.dbchangelog.DropPrimaryKeyType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DropPrimaryKeyTypeItemProvider dropPrimaryKeyTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.liquibase.xml.ns.dbchangelog.DropPrimaryKeyType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDropPrimaryKeyTypeAdapter() {
		if (dropPrimaryKeyTypeItemProvider == null) {
			dropPrimaryKeyTypeItemProvider = new DropPrimaryKeyTypeItemProvider(this);
		}

		return dropPrimaryKeyTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.liquibase.xml.ns.dbchangelog.DropProcedureType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DropProcedureTypeItemProvider dropProcedureTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.liquibase.xml.ns.dbchangelog.DropProcedureType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDropProcedureTypeAdapter() {
		if (dropProcedureTypeItemProvider == null) {
			dropProcedureTypeItemProvider = new DropProcedureTypeItemProvider(this);
		}

		return dropProcedureTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.liquibase.xml.ns.dbchangelog.DropSequenceType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DropSequenceTypeItemProvider dropSequenceTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.liquibase.xml.ns.dbchangelog.DropSequenceType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDropSequenceTypeAdapter() {
		if (dropSequenceTypeItemProvider == null) {
			dropSequenceTypeItemProvider = new DropSequenceTypeItemProvider(this);
		}

		return dropSequenceTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.liquibase.xml.ns.dbchangelog.DropTableType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DropTableTypeItemProvider dropTableTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.liquibase.xml.ns.dbchangelog.DropTableType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDropTableTypeAdapter() {
		if (dropTableTypeItemProvider == null) {
			dropTableTypeItemProvider = new DropTableTypeItemProvider(this);
		}

		return dropTableTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.liquibase.xml.ns.dbchangelog.DropUniqueConstraintType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DropUniqueConstraintTypeItemProvider dropUniqueConstraintTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.liquibase.xml.ns.dbchangelog.DropUniqueConstraintType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDropUniqueConstraintTypeAdapter() {
		if (dropUniqueConstraintTypeItemProvider == null) {
			dropUniqueConstraintTypeItemProvider = new DropUniqueConstraintTypeItemProvider(this);
		}

		return dropUniqueConstraintTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.liquibase.xml.ns.dbchangelog.DropViewType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DropViewTypeItemProvider dropViewTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.liquibase.xml.ns.dbchangelog.DropViewType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDropViewTypeAdapter() {
		if (dropViewTypeItemProvider == null) {
			dropViewTypeItemProvider = new DropViewTypeItemProvider(this);
		}

		return dropViewTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.liquibase.xml.ns.dbchangelog.ExecuteCommandType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExecuteCommandTypeItemProvider executeCommandTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.liquibase.xml.ns.dbchangelog.ExecuteCommandType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExecuteCommandTypeAdapter() {
		if (executeCommandTypeItemProvider == null) {
			executeCommandTypeItemProvider = new ExecuteCommandTypeItemProvider(this);
		}

		return executeCommandTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.liquibase.xml.ns.dbchangelog.ExpectedQuotingStrategyType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExpectedQuotingStrategyTypeItemProvider expectedQuotingStrategyTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.liquibase.xml.ns.dbchangelog.ExpectedQuotingStrategyType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExpectedQuotingStrategyTypeAdapter() {
		if (expectedQuotingStrategyTypeItemProvider == null) {
			expectedQuotingStrategyTypeItemProvider = new ExpectedQuotingStrategyTypeItemProvider(this);
		}

		return expectedQuotingStrategyTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.liquibase.xml.ns.dbchangelog.ForeignKeyConstraintExistsType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ForeignKeyConstraintExistsTypeItemProvider foreignKeyConstraintExistsTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.liquibase.xml.ns.dbchangelog.ForeignKeyConstraintExistsType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createForeignKeyConstraintExistsTypeAdapter() {
		if (foreignKeyConstraintExistsTypeItemProvider == null) {
			foreignKeyConstraintExistsTypeItemProvider = new ForeignKeyConstraintExistsTypeItemProvider(this);
		}

		return foreignKeyConstraintExistsTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.liquibase.xml.ns.dbchangelog.IncludeAllType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IncludeAllTypeItemProvider includeAllTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.liquibase.xml.ns.dbchangelog.IncludeAllType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIncludeAllTypeAdapter() {
		if (includeAllTypeItemProvider == null) {
			includeAllTypeItemProvider = new IncludeAllTypeItemProvider(this);
		}

		return includeAllTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.liquibase.xml.ns.dbchangelog.IncludeType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IncludeTypeItemProvider includeTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.liquibase.xml.ns.dbchangelog.IncludeType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIncludeTypeAdapter() {
		if (includeTypeItemProvider == null) {
			includeTypeItemProvider = new IncludeTypeItemProvider(this);
		}

		return includeTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.liquibase.xml.ns.dbchangelog.IndexExistsType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IndexExistsTypeItemProvider indexExistsTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.liquibase.xml.ns.dbchangelog.IndexExistsType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIndexExistsTypeAdapter() {
		if (indexExistsTypeItemProvider == null) {
			indexExistsTypeItemProvider = new IndexExistsTypeItemProvider(this);
		}

		return indexExistsTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.liquibase.xml.ns.dbchangelog.InsertType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InsertTypeItemProvider insertTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.liquibase.xml.ns.dbchangelog.InsertType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInsertTypeAdapter() {
		if (insertTypeItemProvider == null) {
			insertTypeItemProvider = new InsertTypeItemProvider(this);
		}

		return insertTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.liquibase.xml.ns.dbchangelog.LoadDataType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LoadDataTypeItemProvider loadDataTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.liquibase.xml.ns.dbchangelog.LoadDataType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLoadDataTypeAdapter() {
		if (loadDataTypeItemProvider == null) {
			loadDataTypeItemProvider = new LoadDataTypeItemProvider(this);
		}

		return loadDataTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.liquibase.xml.ns.dbchangelog.LoadUpdateDataType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LoadUpdateDataTypeItemProvider loadUpdateDataTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.liquibase.xml.ns.dbchangelog.LoadUpdateDataType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLoadUpdateDataTypeAdapter() {
		if (loadUpdateDataTypeItemProvider == null) {
			loadUpdateDataTypeItemProvider = new LoadUpdateDataTypeItemProvider(this);
		}

		return loadUpdateDataTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.liquibase.xml.ns.dbchangelog.MergeColumnsType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MergeColumnsTypeItemProvider mergeColumnsTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.liquibase.xml.ns.dbchangelog.MergeColumnsType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMergeColumnsTypeAdapter() {
		if (mergeColumnsTypeItemProvider == null) {
			mergeColumnsTypeItemProvider = new MergeColumnsTypeItemProvider(this);
		}

		return mergeColumnsTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.liquibase.xml.ns.dbchangelog.ModifyDataTypeType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModifyDataTypeTypeItemProvider modifyDataTypeTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.liquibase.xml.ns.dbchangelog.ModifyDataTypeType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModifyDataTypeTypeAdapter() {
		if (modifyDataTypeTypeItemProvider == null) {
			modifyDataTypeTypeItemProvider = new ModifyDataTypeTypeItemProvider(this);
		}

		return modifyDataTypeTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.liquibase.xml.ns.dbchangelog.ModifySqlType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModifySqlTypeItemProvider modifySqlTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.liquibase.xml.ns.dbchangelog.ModifySqlType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModifySqlTypeAdapter() {
		if (modifySqlTypeItemProvider == null) {
			modifySqlTypeItemProvider = new ModifySqlTypeItemProvider(this);
		}

		return modifySqlTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.liquibase.xml.ns.dbchangelog.NotType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NotTypeItemProvider notTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.liquibase.xml.ns.dbchangelog.NotType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNotTypeAdapter() {
		if (notTypeItemProvider == null) {
			notTypeItemProvider = new NotTypeItemProvider(this);
		}

		return notTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.liquibase.xml.ns.dbchangelog.OrType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OrTypeItemProvider orTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.liquibase.xml.ns.dbchangelog.OrType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOrTypeAdapter() {
		if (orTypeItemProvider == null) {
			orTypeItemProvider = new OrTypeItemProvider(this);
		}

		return orTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.liquibase.xml.ns.dbchangelog.ParamType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParamTypeItemProvider paramTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.liquibase.xml.ns.dbchangelog.ParamType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParamTypeAdapter() {
		if (paramTypeItemProvider == null) {
			paramTypeItemProvider = new ParamTypeItemProvider(this);
		}

		return paramTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.liquibase.xml.ns.dbchangelog.ParamType1} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParamType1ItemProvider paramType1ItemProvider;

	/**
	 * This creates an adapter for a {@link org.liquibase.xml.ns.dbchangelog.ParamType1}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParamType1Adapter() {
		if (paramType1ItemProvider == null) {
			paramType1ItemProvider = new ParamType1ItemProvider(this);
		}

		return paramType1ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.liquibase.xml.ns.dbchangelog.ParamType2} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParamType2ItemProvider paramType2ItemProvider;

	/**
	 * This creates an adapter for a {@link org.liquibase.xml.ns.dbchangelog.ParamType2}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParamType2Adapter() {
		if (paramType2ItemProvider == null) {
			paramType2ItemProvider = new ParamType2ItemProvider(this);
		}

		return paramType2ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.liquibase.xml.ns.dbchangelog.PreConditionsType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PreConditionsTypeItemProvider preConditionsTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.liquibase.xml.ns.dbchangelog.PreConditionsType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPreConditionsTypeAdapter() {
		if (preConditionsTypeItemProvider == null) {
			preConditionsTypeItemProvider = new PreConditionsTypeItemProvider(this);
		}

		return preConditionsTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.liquibase.xml.ns.dbchangelog.PreConditionsType1} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PreConditionsType1ItemProvider preConditionsType1ItemProvider;

	/**
	 * This creates an adapter for a {@link org.liquibase.xml.ns.dbchangelog.PreConditionsType1}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPreConditionsType1Adapter() {
		if (preConditionsType1ItemProvider == null) {
			preConditionsType1ItemProvider = new PreConditionsType1ItemProvider(this);
		}

		return preConditionsType1ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.liquibase.xml.ns.dbchangelog.PrependType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PrependTypeItemProvider prependTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.liquibase.xml.ns.dbchangelog.PrependType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPrependTypeAdapter() {
		if (prependTypeItemProvider == null) {
			prependTypeItemProvider = new PrependTypeItemProvider(this);
		}

		return prependTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.liquibase.xml.ns.dbchangelog.PrimaryKeyExistsType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PrimaryKeyExistsTypeItemProvider primaryKeyExistsTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.liquibase.xml.ns.dbchangelog.PrimaryKeyExistsType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPrimaryKeyExistsTypeAdapter() {
		if (primaryKeyExistsTypeItemProvider == null) {
			primaryKeyExistsTypeItemProvider = new PrimaryKeyExistsTypeItemProvider(this);
		}

		return primaryKeyExistsTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.liquibase.xml.ns.dbchangelog.PropertyType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropertyTypeItemProvider propertyTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.liquibase.xml.ns.dbchangelog.PropertyType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropertyTypeAdapter() {
		if (propertyTypeItemProvider == null) {
			propertyTypeItemProvider = new PropertyTypeItemProvider(this);
		}

		return propertyTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.liquibase.xml.ns.dbchangelog.RegExpReplaceType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RegExpReplaceTypeItemProvider regExpReplaceTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.liquibase.xml.ns.dbchangelog.RegExpReplaceType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRegExpReplaceTypeAdapter() {
		if (regExpReplaceTypeItemProvider == null) {
			regExpReplaceTypeItemProvider = new RegExpReplaceTypeItemProvider(this);
		}

		return regExpReplaceTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.liquibase.xml.ns.dbchangelog.RenameColumnType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RenameColumnTypeItemProvider renameColumnTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.liquibase.xml.ns.dbchangelog.RenameColumnType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRenameColumnTypeAdapter() {
		if (renameColumnTypeItemProvider == null) {
			renameColumnTypeItemProvider = new RenameColumnTypeItemProvider(this);
		}

		return renameColumnTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.liquibase.xml.ns.dbchangelog.RenameTableType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RenameTableTypeItemProvider renameTableTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.liquibase.xml.ns.dbchangelog.RenameTableType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRenameTableTypeAdapter() {
		if (renameTableTypeItemProvider == null) {
			renameTableTypeItemProvider = new RenameTableTypeItemProvider(this);
		}

		return renameTableTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.liquibase.xml.ns.dbchangelog.RenameViewType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RenameViewTypeItemProvider renameViewTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.liquibase.xml.ns.dbchangelog.RenameViewType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRenameViewTypeAdapter() {
		if (renameViewTypeItemProvider == null) {
			renameViewTypeItemProvider = new RenameViewTypeItemProvider(this);
		}

		return renameViewTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.liquibase.xml.ns.dbchangelog.ReplaceType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReplaceTypeItemProvider replaceTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.liquibase.xml.ns.dbchangelog.ReplaceType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReplaceTypeAdapter() {
		if (replaceTypeItemProvider == null) {
			replaceTypeItemProvider = new ReplaceTypeItemProvider(this);
		}

		return replaceTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.liquibase.xml.ns.dbchangelog.RollbackType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RollbackTypeItemProvider rollbackTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.liquibase.xml.ns.dbchangelog.RollbackType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRollbackTypeAdapter() {
		if (rollbackTypeItemProvider == null) {
			rollbackTypeItemProvider = new RollbackTypeItemProvider(this);
		}

		return rollbackTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.liquibase.xml.ns.dbchangelog.RowCountType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RowCountTypeItemProvider rowCountTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.liquibase.xml.ns.dbchangelog.RowCountType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRowCountTypeAdapter() {
		if (rowCountTypeItemProvider == null) {
			rowCountTypeItemProvider = new RowCountTypeItemProvider(this);
		}

		return rowCountTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.liquibase.xml.ns.dbchangelog.RunningAsType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RunningAsTypeItemProvider runningAsTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.liquibase.xml.ns.dbchangelog.RunningAsType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRunningAsTypeAdapter() {
		if (runningAsTypeItemProvider == null) {
			runningAsTypeItemProvider = new RunningAsTypeItemProvider(this);
		}

		return runningAsTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.liquibase.xml.ns.dbchangelog.SequenceExistsType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SequenceExistsTypeItemProvider sequenceExistsTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.liquibase.xml.ns.dbchangelog.SequenceExistsType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSequenceExistsTypeAdapter() {
		if (sequenceExistsTypeItemProvider == null) {
			sequenceExistsTypeItemProvider = new SequenceExistsTypeItemProvider(this);
		}

		return sequenceExistsTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.liquibase.xml.ns.dbchangelog.SqlCheckType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SqlCheckTypeItemProvider sqlCheckTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.liquibase.xml.ns.dbchangelog.SqlCheckType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSqlCheckTypeAdapter() {
		if (sqlCheckTypeItemProvider == null) {
			sqlCheckTypeItemProvider = new SqlCheckTypeItemProvider(this);
		}

		return sqlCheckTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.liquibase.xml.ns.dbchangelog.SqlFileType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SqlFileTypeItemProvider sqlFileTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.liquibase.xml.ns.dbchangelog.SqlFileType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSqlFileTypeAdapter() {
		if (sqlFileTypeItemProvider == null) {
			sqlFileTypeItemProvider = new SqlFileTypeItemProvider(this);
		}

		return sqlFileTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.liquibase.xml.ns.dbchangelog.SqlType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SqlTypeItemProvider sqlTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.liquibase.xml.ns.dbchangelog.SqlType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSqlTypeAdapter() {
		if (sqlTypeItemProvider == null) {
			sqlTypeItemProvider = new SqlTypeItemProvider(this);
		}

		return sqlTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.liquibase.xml.ns.dbchangelog.StopType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StopTypeItemProvider stopTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.liquibase.xml.ns.dbchangelog.StopType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStopTypeAdapter() {
		if (stopTypeItemProvider == null) {
			stopTypeItemProvider = new StopTypeItemProvider(this);
		}

		return stopTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.liquibase.xml.ns.dbchangelog.TableExistsType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TableExistsTypeItemProvider tableExistsTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.liquibase.xml.ns.dbchangelog.TableExistsType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTableExistsTypeAdapter() {
		if (tableExistsTypeItemProvider == null) {
			tableExistsTypeItemProvider = new TableExistsTypeItemProvider(this);
		}

		return tableExistsTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.liquibase.xml.ns.dbchangelog.TableIsEmptyType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TableIsEmptyTypeItemProvider tableIsEmptyTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.liquibase.xml.ns.dbchangelog.TableIsEmptyType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTableIsEmptyTypeAdapter() {
		if (tableIsEmptyTypeItemProvider == null) {
			tableIsEmptyTypeItemProvider = new TableIsEmptyTypeItemProvider(this);
		}

		return tableIsEmptyTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.liquibase.xml.ns.dbchangelog.TagDatabaseType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TagDatabaseTypeItemProvider tagDatabaseTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.liquibase.xml.ns.dbchangelog.TagDatabaseType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTagDatabaseTypeAdapter() {
		if (tagDatabaseTypeItemProvider == null) {
			tagDatabaseTypeItemProvider = new TagDatabaseTypeItemProvider(this);
		}

		return tagDatabaseTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.liquibase.xml.ns.dbchangelog.UpdateType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UpdateTypeItemProvider updateTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.liquibase.xml.ns.dbchangelog.UpdateType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUpdateTypeAdapter() {
		if (updateTypeItemProvider == null) {
			updateTypeItemProvider = new UpdateTypeItemProvider(this);
		}

		return updateTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.liquibase.xml.ns.dbchangelog.ValidCheckSumType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ValidCheckSumTypeItemProvider validCheckSumTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.liquibase.xml.ns.dbchangelog.ValidCheckSumType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createValidCheckSumTypeAdapter() {
		if (validCheckSumTypeItemProvider == null) {
			validCheckSumTypeItemProvider = new ValidCheckSumTypeItemProvider(this);
		}

		return validCheckSumTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.liquibase.xml.ns.dbchangelog.ViewExistsType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ViewExistsTypeItemProvider viewExistsTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.liquibase.xml.ns.dbchangelog.ViewExistsType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createViewExistsTypeAdapter() {
		if (viewExistsTypeItemProvider == null) {
			viewExistsTypeItemProvider = new ViewExistsTypeItemProvider(this);
		}

		return viewExistsTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.liquibase.xml.ns.dbchangelog.WhereParamsType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WhereParamsTypeItemProvider whereParamsTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.liquibase.xml.ns.dbchangelog.WhereParamsType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWhereParamsTypeAdapter() {
		if (whereParamsTypeItemProvider == null) {
			whereParamsTypeItemProvider = new WhereParamsTypeItemProvider(this);
		}

		return whereParamsTypeItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (addAutoIncrementTypeItemProvider != null) addAutoIncrementTypeItemProvider.dispose();
		if (addColumnTypeItemProvider != null) addColumnTypeItemProvider.dispose();
		if (addDefaultValueTypeItemProvider != null) addDefaultValueTypeItemProvider.dispose();
		if (addForeignKeyConstraintTypeItemProvider != null) addForeignKeyConstraintTypeItemProvider.dispose();
		if (addLookupTableTypeItemProvider != null) addLookupTableTypeItemProvider.dispose();
		if (addNotNullConstraintTypeItemProvider != null) addNotNullConstraintTypeItemProvider.dispose();
		if (addPrimaryKeyTypeItemProvider != null) addPrimaryKeyTypeItemProvider.dispose();
		if (addUniqueConstraintTypeItemProvider != null) addUniqueConstraintTypeItemProvider.dispose();
		if (alterSequenceTypeItemProvider != null) alterSequenceTypeItemProvider.dispose();
		if (andTypeItemProvider != null) andTypeItemProvider.dispose();
		if (appendTypeItemProvider != null) appendTypeItemProvider.dispose();
		if (argTypeItemProvider != null) argTypeItemProvider.dispose();
		if (changeLogPropertyDefinedTypeItemProvider != null) changeLogPropertyDefinedTypeItemProvider.dispose();
		if (changeSetExecutedTypeItemProvider != null) changeSetExecutedTypeItemProvider.dispose();
		if (changeSetTypeItemProvider != null) changeSetTypeItemProvider.dispose();
		if (columnExistsTypeItemProvider != null) columnExistsTypeItemProvider.dispose();
		if (columnTypeItemProvider != null) columnTypeItemProvider.dispose();
		if (columnType1ItemProvider != null) columnType1ItemProvider.dispose();
		if (columnType2ItemProvider != null) columnType2ItemProvider.dispose();
		if (columnType3ItemProvider != null) columnType3ItemProvider.dispose();
		if (columnType4ItemProvider != null) columnType4ItemProvider.dispose();
		if (constraintsTypeItemProvider != null) constraintsTypeItemProvider.dispose();
		if (createIndexTypeItemProvider != null) createIndexTypeItemProvider.dispose();
		if (createProcedureTypeItemProvider != null) createProcedureTypeItemProvider.dispose();
		if (createSequenceTypeItemProvider != null) createSequenceTypeItemProvider.dispose();
		if (createTableTypeItemProvider != null) createTableTypeItemProvider.dispose();
		if (createViewTypeItemProvider != null) createViewTypeItemProvider.dispose();
		if (customChangeTypeItemProvider != null) customChangeTypeItemProvider.dispose();
		if (customPreconditionTypeItemProvider != null) customPreconditionTypeItemProvider.dispose();
		if (databaseChangeLogTypeItemProvider != null) databaseChangeLogTypeItemProvider.dispose();
		if (dbmsTypeItemProvider != null) dbmsTypeItemProvider.dispose();
		if (deleteTypeItemProvider != null) deleteTypeItemProvider.dispose();
		if (documentRootItemProvider != null) documentRootItemProvider.dispose();
		if (dropAllForeignKeyConstraintsTypeItemProvider != null) dropAllForeignKeyConstraintsTypeItemProvider.dispose();
		if (dropColumnTypeItemProvider != null) dropColumnTypeItemProvider.dispose();
		if (dropDefaultValueTypeItemProvider != null) dropDefaultValueTypeItemProvider.dispose();
		if (dropForeignKeyConstraintTypeItemProvider != null) dropForeignKeyConstraintTypeItemProvider.dispose();
		if (dropIndexTypeItemProvider != null) dropIndexTypeItemProvider.dispose();
		if (dropNotNullConstraintTypeItemProvider != null) dropNotNullConstraintTypeItemProvider.dispose();
		if (dropPrimaryKeyTypeItemProvider != null) dropPrimaryKeyTypeItemProvider.dispose();
		if (dropProcedureTypeItemProvider != null) dropProcedureTypeItemProvider.dispose();
		if (dropSequenceTypeItemProvider != null) dropSequenceTypeItemProvider.dispose();
		if (dropTableTypeItemProvider != null) dropTableTypeItemProvider.dispose();
		if (dropUniqueConstraintTypeItemProvider != null) dropUniqueConstraintTypeItemProvider.dispose();
		if (dropViewTypeItemProvider != null) dropViewTypeItemProvider.dispose();
		if (executeCommandTypeItemProvider != null) executeCommandTypeItemProvider.dispose();
		if (expectedQuotingStrategyTypeItemProvider != null) expectedQuotingStrategyTypeItemProvider.dispose();
		if (foreignKeyConstraintExistsTypeItemProvider != null) foreignKeyConstraintExistsTypeItemProvider.dispose();
		if (includeAllTypeItemProvider != null) includeAllTypeItemProvider.dispose();
		if (includeTypeItemProvider != null) includeTypeItemProvider.dispose();
		if (indexExistsTypeItemProvider != null) indexExistsTypeItemProvider.dispose();
		if (insertTypeItemProvider != null) insertTypeItemProvider.dispose();
		if (loadDataTypeItemProvider != null) loadDataTypeItemProvider.dispose();
		if (loadUpdateDataTypeItemProvider != null) loadUpdateDataTypeItemProvider.dispose();
		if (mergeColumnsTypeItemProvider != null) mergeColumnsTypeItemProvider.dispose();
		if (modifyDataTypeTypeItemProvider != null) modifyDataTypeTypeItemProvider.dispose();
		if (modifySqlTypeItemProvider != null) modifySqlTypeItemProvider.dispose();
		if (notTypeItemProvider != null) notTypeItemProvider.dispose();
		if (orTypeItemProvider != null) orTypeItemProvider.dispose();
		if (paramTypeItemProvider != null) paramTypeItemProvider.dispose();
		if (paramType1ItemProvider != null) paramType1ItemProvider.dispose();
		if (paramType2ItemProvider != null) paramType2ItemProvider.dispose();
		if (preConditionsTypeItemProvider != null) preConditionsTypeItemProvider.dispose();
		if (preConditionsType1ItemProvider != null) preConditionsType1ItemProvider.dispose();
		if (prependTypeItemProvider != null) prependTypeItemProvider.dispose();
		if (primaryKeyExistsTypeItemProvider != null) primaryKeyExistsTypeItemProvider.dispose();
		if (propertyTypeItemProvider != null) propertyTypeItemProvider.dispose();
		if (regExpReplaceTypeItemProvider != null) regExpReplaceTypeItemProvider.dispose();
		if (renameColumnTypeItemProvider != null) renameColumnTypeItemProvider.dispose();
		if (renameTableTypeItemProvider != null) renameTableTypeItemProvider.dispose();
		if (renameViewTypeItemProvider != null) renameViewTypeItemProvider.dispose();
		if (replaceTypeItemProvider != null) replaceTypeItemProvider.dispose();
		if (rollbackTypeItemProvider != null) rollbackTypeItemProvider.dispose();
		if (rowCountTypeItemProvider != null) rowCountTypeItemProvider.dispose();
		if (runningAsTypeItemProvider != null) runningAsTypeItemProvider.dispose();
		if (sequenceExistsTypeItemProvider != null) sequenceExistsTypeItemProvider.dispose();
		if (sqlCheckTypeItemProvider != null) sqlCheckTypeItemProvider.dispose();
		if (sqlFileTypeItemProvider != null) sqlFileTypeItemProvider.dispose();
		if (sqlTypeItemProvider != null) sqlTypeItemProvider.dispose();
		if (stopTypeItemProvider != null) stopTypeItemProvider.dispose();
		if (tableExistsTypeItemProvider != null) tableExistsTypeItemProvider.dispose();
		if (tableIsEmptyTypeItemProvider != null) tableIsEmptyTypeItemProvider.dispose();
		if (tagDatabaseTypeItemProvider != null) tagDatabaseTypeItemProvider.dispose();
		if (updateTypeItemProvider != null) updateTypeItemProvider.dispose();
		if (validCheckSumTypeItemProvider != null) validCheckSumTypeItemProvider.dispose();
		if (viewExistsTypeItemProvider != null) viewExistsTypeItemProvider.dispose();
		if (whereParamsTypeItemProvider != null) whereParamsTypeItemProvider.dispose();
	}

}
